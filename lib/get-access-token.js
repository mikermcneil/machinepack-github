module.exports = {

  friendlyName: 'Get access token',
  description: 'Generate a new access token for acting on behalf of a particular GitHub user account.',
  extendedDescription: 'Note that you must first have a valid `code` from the user proving that they\'re OK with this.\nYou can get a code by redirecting the user to the url generated by calling the `getLoginUrl(...)` machine.',
  cacheable: true,

  inputs: {
    clientId: {
      example: '215798311808508',
      description: 'The unique identifier for your GitHub app  (i.e. this is the "Client ID" listed on your app\'s settings page)',
      required: true
    },
    clientSecret: {
      example: 'dsg4901g0123456',
      description: 'The developer "secret" for your GitHub app (i.e. this is the "Client ID" listed on your app\'s settings page)',
      required: true
    },
    code: {
      example: 'AQDvCav5zRSafS795TckAerUV53xzgqRyrcfYX2i_PJFObCvACVRP-V7sfemiMPBh3TWypvagfZ6aoqfwKCNcBxg8XR_skdYUe5tsY9UzX9Z_8q4mRrqaLhwSh5OHj9ORmE4ocyd-neZtdceTZjlmEVeO38UH9QOe_md7h5hy2gMhOS6TL9IBk5Guxg3O6I0WmjpFNPoj6JzWIvG9cgj7RQqxMA2q_8EJxGPTqEbmTqOBqqCIOlvPEPCeIiy21VD9__tuzB0JvgqbVh-U_WW8mjwGBqsfxlNvjYwIxk4zBNAxuRJijkkn0TwyogFpZqIlkY',
      description: 'The OAuth `code` generated by GitHub and sent to the `callbackUrl` if the user chooses to grant your app the requested permissions',
      required: true
    },
    callbackUrl: {
      example: 'http://localhost:1337/user/github/login',
      description: 'The redirect URL that was used when generating the provided `code`',
      required: true
    }
  },

  exits: {
    redirectUriMismatch: {
      description: 'Triggered when the callbackUrl doesn\'t match the settings supplied in the configured app settings on GitHub.'
    },
    badVerificationCode: {
      description: 'Triggered when the code sent with the request is invalid.'
    },
    incorrectClientCredentials: {
      description: 'Triggered when either the client id or client secret is incorrect.'
    },
    error: {
      description: 'Triggered when the GitHub API returns an error (i.e. a non-2xx status code)'
    },
    success: {
      description: 'Returns the access token.',
      example: {
        token: 'CA2Emk9XsJUIBAHB9sTF5rOdNmAXTDjiHxZaZC1GYtFZCcdYGVnLYZB7jZCvensIpGc22yEzN6CL6wtQ9LPVXTNkuP6eQoUQ0toEVPrmTTqDpj0POijBpsuZBnx7jrZCHaTw8leiZBn0R8u6gZAYZAuD77cA3tnDMYvHhrl42CnljROeC9maWoa5zbsT2TZBXdL9wEuGQDSxKqRPyajRw3P3HEK'
      }
    }
  },

  fn: function (inputs, exits) {

    var Http = require('machinepack-http');

    // Send an HTTP request and receive the response.
    Http.sendHttpRequest({
      baseUrl: 'https://github.com',
      url: '/login/oauth/access_token',
      method: 'post',
      params: {
        'client_id': inputs.clientId,
        'client_secret': inputs.clientSecret,
        'code': inputs.code,
        'redirect_uri': inputs.callbackUrl
      },
      headers: {
        'Accept': 'application/json'
      },
    }).exec({

      success: function(response) {

        // Parse AccessToken from the response body
        try {
          var data = JSON.parse(response.body);

          if(data.error) {
            if(data.error === 'redirect_uri_mismatch') return exits.redirectUriMismatch();
            if(data.error === 'bad_verification_code') return exits.badVerificationCode();
            if(data.error === 'incorrect_client_credentials') return exits.incorrectClientCredentials();
          }

          if(!data.access_token) {
            return exits.error(data);
          }

          var accessToken = data.access_token;
          return exits.success({ token: accessToken });
        }
        catch (e) {
          return exits.error(e);
        }

      },

      error: function(err) {
        return exits.error(err);
      }
    });
  }
};
